{
  "name": "personal coach",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/api/v1/memories/search",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $('Telegram Trigger1').item.json.body.message.from.id }}\",\n  \"query\": {{ JSON.stringify($json.body.message.text) }},\n  \"k\": 3,\n  \"enable_graph\": true\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        208,
        0
      ],
      "id": "b6ea8902-e6d5-47bc-a771-9ce089ec8590",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        528,
        224
      ],
      "id": "24a4ac34-05a9-4987-95d2-1b7b149a63ee",
      "name": "gpt 4.1 mini",
      "credentials": {
        "openAiApi": {
          "id": "aEwEH5APyXx6cq8g",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "65beee5e-161b-4dbf-905d-2d5c4a3e4859/webhook",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -32,
        0
      ],
      "id": "1cfdc955-242e-4000-b714-5abce73f7243",
      "name": "Telegram Trigger1",
      "webhookId": "f763135e-de5e-41f2-8ddf-a525c2a59be0"
    },
    {
      "parameters": {
        "jsCode": "// Input: Mem0 search results\nconst results = $json.results || [];\n\n// Take top 10 (already ranked by relevance)\nconst top10 = results\n  .sort((a, b) => b.score - a.score) // highest score first\n  .slice(0, 10);\n\n// Just grab the memory text\nconst memories = top10.map(r => r.memory);\n\n// Option A: join into a single string (good for LLM input)\nreturn [\n  {\n    json: {\n      memories: memories.join(\"\\n\")\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        0
      ],
      "id": "a7fd9996-8927-4eff-8c68-3112cf49594c",
      "name": "filter memories"
    },
    {
      "parameters": {
        "content": "Did not use Telegram because HTTPS is dependency when locally hosted",
        "height": 96,
        "width": 182
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -48,
        144
      ],
      "id": "93d6302f-a7d5-4c15-bf19-31ee35351806",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger1').item.json.body.message.chat.id }}",
        "text": "={{ $('AI Agent: Chat').item.json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1712,
        0
      ],
      "id": "86f770f5-ac14-4bf4-baa2-310c0e7c9b5f",
      "name": "Send a text message",
      "webhookId": "8d969343-7385-44f8-96b6-a8756096a475",
      "credentials": {
        "telegramApi": {
          "id": "HctjymusMazG9IWS",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "content": "Steps\n0. Run n8n\n1. Run docker (Mem0 + Neo4j, Qdrant)\n2. Run ngrok\n3. Change the telegram url\n4. start chatting\n\nhttps://www.youtube.com/watch?v=kNsX2qu8jHY (ideas for video)\n\nApproach:\n→ User input\n→ Get 10 relevant memories\n→ Bot reasoning (LLM)\n→ Memory inference (LLM)\n→ Memory write (Mem0)",
        "height": 368,
        "width": 342
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -496,
        16
      ],
      "id": "2afa7d7e-bc1a-45cf-9f4d-0f6266cc3bb8",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/api/v1/memories",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "={{ $('Telegram Trigger1').item.json.body.message.from.id.toString() }}"
            },
            {
              "name": "memory",
              "value": "={{ $json.textList }}"
            },
            {
              "name": "enable_graph",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1712,
        304
      ],
      "id": "35858f38-47a3-41ac-9730-b2d28c55b67e",
      "name": "add memories"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger1').first().json.body.message.chat.id.toString() }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        720,
        224
      ],
      "id": "f994caba-74c4-4723-af3b-81d0987bd458",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Telegram Trigger1').item.json.body.message.text }}",
        "options": {
          "systemMessage": "=You are a a highly sought-after executive coach and psychologist. Your diverse background includes experience as a mountain guide, BASE jumper, and founder of One Day Coaching. Your coaching philosophy centers on transformative change, emphasizing mindset shifts over incremental improvements. You are known for coaching elite athletes, to multiple elite competition victories. Your approach incorporates frameworks like the Circle of Control and Helicopter View to foster self-leadership, presence, and resilience. He values reflection, gratitude, and a focus on process-oriented goals. You exist to help people achieve sustainable success.\n\nPhilosophy: transformations, not incremental changes.\n\nCore Philosophy\n- Change vs Transformation:\n- Change = skill acquisition, reversible, fades with neglect (pull-ups, languages).\n- Transformation = permanent mindset shift, irreversible (butterfly, popcorn, fatherhood).\n- Coaching goal → transformation.\n- Presence & Awareness: anchor in the moment through gratitude, sensory focus, reflection.\n- Self-leadership: regulate inner states (focus, gratitude, energy) like dashboard instruments.\n- Coaching style: questions, not prescriptions; trigger self-discovery, not obedience.\n- Passion vs Profession: preserve passion → prevents burnout, sustains fire.\n\nFrameworks & Tools\n- Circle of Control → agency vs victimhood; discard uncontrollables.\n- Helicopter View → shift perspective, step outside tunnel vision, self-coaching from altitude.\n- Time Jump → imagine future state already achieved, describe backward.\n- 1–10 Scale → precision self-assessment, 0.1-step improvements.\n- Gratitude Practice → daily anchor, builds resilience.\n- Checklists & Rules → externalize memory, reduce errors under stress.\n- Reflection Loop → act, reflect, adjust; expert hallmark.\n- Success Recipe Analysis → extract repeatable patterns from past wins.\n- Fun Injection → joy fuels discipline, sustains long goals.\n- Grandchildren Perspective → big-picture values orientation.\n- Anger Diagnostic → anger = unmet needs indicator.\n\nMotivation & Goal-Setting\nGoal Types:\n- Ranking → external, unstable, unhelpful.\n- Performance → measurable, objective metrics.\n- Process → controllable actions, most effective.\n- Mastery → long-term growth, most enduring.\n- Minimal Success Index (MSI) → define “good enough” baseline, balance ambition with realism.\n- Wave Model of Training → intensity cycles; build base, peak later.\n- Small Goals → Momentum → micro-wins sustain progression.\n- Discipline vs Motivation → discipline bridges low-motivation periods.\n\nMindset Principles\n- Satisfaction Formula → Reality ÷ Expectations; adjust expectations to increase satisfaction.\n- Weakness Strategy → accept/manage weaknesses, amplify strengths.\n- Flow Channel → balance challenge + skill for optimal state.\n- Post-Peak Valleys → dips are natural, part of growth cycle.\n- Risk & Resilience → safety first; resilience from reframing setbacks.\n- Comparison Trap → avoid performance drain by focusing inward.\n\nSupport & Team Dynamics\n- Micro-check-ins: “How are you?” → continuous self-awareness.\n- Non-directive support: athlete defines needs; coach listens, reflects.\n- Trust & Honesty: foundation of sustainable performance.\n- Bubble Focus: stay inward-focused despite competition/noise.\n- Key Themes for AI Trainer Design\n- Transformation-oriented training, not just skill drills.\n- Structured questioning as primary coaching tool.\n\nExplicit frameworks (Circle of Control, Helicopter View, Time Jump, MSI).\n- Goal-setting architecture: Process → Performance → Mastery (ranking minimized).\n- Fun & joy as motivational multipliers.\n- Reflection loops baked into training cycles.\n- Emphasis on presence, gratitude, emotional regulation.\n- Focus on self-leadership and autonomy.\n\nCommunication style:\n- Be brief, sharp, and practical.\n- Prefer 1–2 sentences over paragraphs \n- ask a powerful question if its unclear how you can help the user.\n- Only expand if asked.\n- Pick one idea (the most relevant to the user query) linked to your key coaching concepts, and find a way to make it actionable\n\n\nHere is some additional information on your pupil:\n{{ $json.memories }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        624,
        0
      ],
      "id": "8eccd3d3-0003-414f-90b9-38c99e1f3546",
      "name": "AI Agent: Chat"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1024,
        512
      ],
      "id": "53d202c4-6e52-4663-9362-bb9ac1d51703",
      "name": "gpt 4.1 mini1",
      "credentials": {
        "openAiApi": {
          "id": "aEwEH5APyXx6cq8g",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger1').first().json.body.message.chat.id.toString() }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1168,
        512
      ],
      "id": "058ef927-c96b-4b17-8853-05478a617956",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "jsCode": "// Grab the first input\nconst input = $input.first().json;\n\n// If output is a string, parse it into JSON\nlet parsed = input.output;\nif (typeof parsed === 'string') {\n  try {\n    parsed = JSON.parse(parsed);\n  } catch (e) {\n    parsed = { memories: [] };\n  }\n}\n\n// Ensure we actually have an array\nconst memories = parsed.memories || [];\n\nlet output = \"Memories:\\n\";\noutput += memories\n  .map(m => `- \"${m.text}\" (${m.inference})`)\n  .join(\"\\n\");\n\nreturn [\n  {\n    json: {\n      textList: output\n    }\n  }\n];\n``\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        304
      ],
      "id": "2660f5e3-3f9b-478d-9101-effd6bad737c",
      "name": "convert memories to list"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Telegram Trigger1').item.json.body.message.text }}",
        "options": {
          "systemMessage": "For memory: After the user speaks, decide what to remember and at what confidence. Here are your inference types:\n\n- Explicit: said directly  \n- Deductive: necessarily follows from explicit  \n- Inductive: general pattern from multiple past messages  \n- Abductive: plausible hypothesis but needs confirmation  \n\nGive up to 5 facts. For each fact, label the inference type.\n\nJSON output only. e.g.:\n\n{\n  \"memories\": [\n    { \"text\": \"user’s favorite post-workout meal is sushi.\", \"inference\": \"explicit\" },\n    { \"text\": \"user works out at the gym every weekday morning.\", \"inference\": \"explicit\" },\n\n    { \"text\": \"user wakes up early to fit training before work.\", \"inference\": \"deductive\" },\n    { \"text\": \"user is likely disciplined with time management.\", \"inference\": \"deductive\" },\n\n    { \"text\": \"user often chooses outdoor activities like hiking, running, and cycling.\", \"inference\": \"inductive\" },\n    { \"text\": \"user tends to feel most energized in natural environments.\", \"inference\": \"inductive\" },\n\n    { \"text\": \"user might enjoy a high-altitude expedition challenge in the future.\", \"inference\": \"abductive\" },\n    { \"text\": \"user could benefit from recovery practices such as yoga or mindfulness.\", \"inference\": \"abductive\" }\n  ]\n}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1056,
        304
      ],
      "id": "02fa9428-148e-4c29-8663-d54bcfe142ef",
      "name": "AI Agent: Long Term Memory"
    },
    {
      "parameters": {
        "content": "# generate chat reply",
        "height": 512,
        "width": 976,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -80,
        -128
      ],
      "id": "88771d50-11da-4caa-81ca-5ff9f9374fb6",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "# generate long term memories",
        "height": 416,
        "width": 976,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        912,
        224
      ],
      "id": "45dac435-025c-4e53-b399-49e9098df952",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# send reply",
        "height": 336,
        "width": 976,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        912,
        -128
      ],
      "id": "7e750ef3-6f96-48c7-b22a-4d8d7cf0eb24",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {},
  "connections": {
    "HTTP Request": {
      "main": [
        [
          {
            "node": "filter memories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gpt 4.1 mini": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent: Chat",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter memories": {
      "main": [
        [
          {
            "node": "AI Agent: Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "add memories": {
      "main": [
        []
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent: Chat",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent: Chat": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent: Long Term Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gpt 4.1 mini1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent: Long Term Memory",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent: Long Term Memory",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "convert memories to list": {
      "main": [
        [
          {
            "node": "add memories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent: Long Term Memory": {
      "main": [
        [
          {
            "node": "convert memories to list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c19f09e7-7b6b-4adf-babc-d3d22171690f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "fb04b4346f624bab301ba87af3de742ec86c55ec1dfa2ee5f5fef9aebaad9741"
  },
  "id": "bVuR1hq8TFEdu15z",
  "tags": [
    {
      "createdAt": "2025-09-15T22:12:26.769Z",
      "updatedAt": "2025-09-15T22:12:26.769Z",
      "id": "QGt98YBb9YGX4lep",
      "name": "ai agent"
    },
    {
      "createdAt": "2025-09-15T22:12:18.502Z",
      "updatedAt": "2025-09-15T22:12:18.502Z",
      "id": "WAw1LMPxoDpSffyH",
      "name": "fitness"
    },
    {
      "createdAt": "2025-09-15T22:12:30.006Z",
      "updatedAt": "2025-09-15T22:12:30.006Z",
      "id": "jLKHYMYwIKKkRRux",
      "name": "deep memory"
    }
  ]
}